Vulnerability	Query clustered version	ChatGPT clustered version	Query dockerfile only main component (semi-automatic with docker compose)	ChatGPT single version	Evaluation, similarities and differences
SQL Injection (https://www.exploit-db.com/exploits/51632) CVE-2023-2636	Generate a dockerfile of Wordpress with Plugin AN_Gradebook <= 5.0.1	"# Use an official WordPress image as the base image
FROM wordpress:latest

# Set the working directory to the WordPress plugins directory
WORKDIR /var/www/html/wp-content/plugins

# Download and install the AN_Gradebook plugin version 5.0.1
RUN curl -o an-gradebook.zip -SL https://downloads.wordpress.org/plugin/an-gradebook.5.0.1.zip \
    && unzip an-gradebook.zip \
    && rm an-gradebook.zip

# Set the working directory back to the WordPress root directory
WORKDIR /var/www/html

# Continue with the default WordPress setup from the official image"	Generate a dockerfile of Wordpress with Plugin AN_Gradebook <= 5.0.1 and a mysql server	"# Use an official WordPress image
FROM wordpress:latest

# Set the AN_Gradebook plugin version
ENV AN_GRADEBOOK_VERSION 5.0.1

# Download and install AN_Gradebook plugin
RUN curl -o /usr/src/wordpress/wp-content/plugins/an_gradebook.zip -SL https://downloads.wordpress.org/plugin/an_gradebook.${AN_GRADEBOOK_VERSION}.zip \
    && unzip -q /usr/src/wordpress/wp-content/plugins/an_gradebook.zip -d /usr/src/wordpress/wp-content/plugins/ \
    && rm /usr/src/wordpress/wp-content/plugins/an_gradebook.zip

# Set up MySQL environment variables
ENV MYSQL_ROOT_PASSWORD=root_password
ENV MYSQL_DATABASE=wordpress
ENV MYSQL_USER=wordpress_user
ENV MYSQL_PASSWORD=wordpress_password

# Use an official MySQL image with a specific version
FROM mysql:5.7

# Copy custom MySQL configuration file
COPY my.cnf /etc/mysql/conf.d/my.cnf

# Copy the initialization script to create the database and user
COPY init.sql /docker-entrypoint-initdb.d/init.sql"	"Clustered version succeed really fast, it needed just the ""unzip"" package, setup of mysql variable (can be automated with ENV variables) and enabling the plugin

Single version merged two different images in one without considering the overlapping, resulting in a mysql image without the Wordpress part starting"
Stored XSS (https://www.exploit-db.com/exploits/51020) CVE-2022-2941	Generate a dockerfile of Wordpress with WP-UserOnline 2.88.0 enabled	"# Use an official WordPress image as the base image
FROM wordpress:latest

# Set the working directory to the WordPress plugins directory
WORKDIR /var/www/html/wp-content/plugins

# Download and install the WP-UserOnline plugin version 2.88.0
RUN curl -o wp-useronline.zip -SL https://downloads.wordpress.org/plugin/wp-useronline.2.88.0.zip \
    && unzip wp-useronline.zip \
    && rm wp-useronline.zip

# Set the working directory back to the WordPress root directory
WORKDIR /var/www/html

# Continue with the default WordPress setup from the official image"	Generate a dockerfile of Wordpress with WP-UserOnline 2.88.0 enabled with mariadb database	"# Use an official WordPress image
FROM wordpress:latest

# Set the WP-UserOnline plugin version
ENV WP_USERONLINE_VERSION 2.88.0

# Download and install WP-UserOnline plugin
RUN curl -o /usr/src/wordpress/wp-content/plugins/wp-useronline.zip -SL https://downloads.wordpress.org/plugin/wp-useronline.${WP_USERONLINE_VERSION}.zip \
    && unzip -q /usr/src/wordpress/wp-content/plugins/wp-useronline.zip -d /usr/src/wordpress/wp-content/plugins/ \
    && rm /usr/src/wordpress/wp-content/plugins/wp-useronline.zip

# Set up MariaDB environment variables
ENV MYSQL_ROOT_PASSWORD=root_password
ENV MYSQL_DATABASE=wordpress
ENV MYSQL_USER=wordpress_user
ENV MYSQL_PASSWORD=wordpress_password

# Use an official MariaDB image with a specific version
FROM mariadb:latest

# Copy custom MariaDB configuration file
COPY my.cnf /etc/mysql/conf.d/my.cnf

# Copy the initialization script to create the database and user
COPY init.sql /docker-entrypoint-initdb.d/init.sql"	"Clustered version succeed really fast, it needed just the ""unzip"" package, setup of mysql variable (can be automated with ENV variables) and enabling the plugin

Single version merged two different images in one without considering the overlapping, resulting in a mysql image without the Wordpress part starting"
CSV Injection (https://www.exploit-db.com/exploits/44559) CVE-2018-10504	Generate a dockerfile of Wordpress with Plugin Form Maker 1.12.20	"# Use the official WordPress image as the base image
FROM wordpress:latest

# Set the working directory to the WordPress plugins directory
WORKDIR /var/www/html/wp-content/plugins/

# Download and install Form Maker plugin version 1.12.20
RUN curl -O https://downloads.wordpress.org/plugin/form-maker.1.12.20.zip \
    && unzip form-maker.1.12.20.zip \
    && rm form-maker.1.12.20.zip

# Set the working directory back to the WordPress root directory
WORKDIR /var/www/html/

# Expose port 80 for HTTP
EXPOSE 80

# Start the WordPress service
CMD [""apache2-foreground""]"	Generate a dockerfile of Wordpress with Plugin Form Maker 1.12.20 and mariadb server in a single dockerfile	"# Use an official WordPress image
FROM wordpress:latest

# Set environment variables for MariaDB
ENV MYSQL_ROOT_PASSWORD=YOUR_DB_PASSWORD
ENV MYSQL_DATABASE=wordpress
ENV MYSQL_USER=wordpress
ENV MYSQL_PASSWORD=YOUR_WP_DB_PASSWORD

# Install necessary PHP extensions for Form Maker
RUN docker-php-ext-install mysqli pdo pdo_mysql

# Install Form Maker plugin
RUN curl -o /tmp/form-maker.zip -SL https://downloads.wordpress.org/plugin/form-maker.1.12.20.zip \
    && unzip /tmp/form-maker.zip -d /usr/src/wordpress/wp-content/plugins/ \
    && rm /tmp/form-maker.zip

# Expose the default WordPress and MariaDB ports
EXPOSE 80

# Copy the entrypoint script to set up database and start services
COPY ./docker-entrypoint.sh /usr/local/bin/

# Make the entrypoint script executable
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Set the entrypoint script
ENTRYPOINT [""docker-entrypoint.sh""]

# Start the services
CMD [""apache2-foreground""]


ENTRYPOINT.SH

#!/bin/bash
set -e

# Start the MariaDB service
service mysql start

# Wait for the MariaDB service to be ready
while ! mysqladmin ping -hlocalhost --silent; do
    sleep 1
done

# Create the WordPress database and user
mysql -uroot -p""$MYSQL_ROOT_PASSWORD"" -e ""CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;""
mysql -uroot -p""$MYSQL_ROOT_PASSWORD"" -e ""GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';""
mysql -uroot -p""$MYSQL_ROOT_PASSWORD"" -e ""FLUSH PRIVILEGES;""

# Continue with the default WordPress entrypoint script
exec docker-entrypoint.sh ""$@"""	"Clustered version succeed really fast, it needed just the ""unzip"" package, setup of mysql variable (can be automated with ENV variables) and enabling the plugin, but in this case it’s impossible to check if the CVS injection worked, because the submission result raises an exception and crash

Single version used Wordpress as base image, and a personalized additional entrypoint to setup mysql server, but didn’t install ""unzip"" package and didn’t actually install the mysql server even if it tries to start it"
Local File Inclusion (https://www.exploit-db.com/exploits/44340) CVE-2018-7422	Generate a dockerfile of Wordpress with Site Editor Plugin 1.1.1	"# Use the official WordPress image
FROM wordpress:latest

# Set environment variables
ENV WORDPRESS_DB_HOST=db \
    WORDPRESS_DB_USER=root \
    WORDPRESS_DB_PASSWORD=password \
    WORDPRESS_DB_NAME=mydatabase

# Install necessary tools and dependencies
RUN apt-get update && \
    apt-get install -y unzip && \
    rm -rf /var/lib/apt/lists/*

# Download and install the Site Editor Plugin version 1.1.1
RUN curl -o /usr/src/wordpress/wp-content/plugins/site-editor.zip -SL https://downloads.wordpress.org/plugin/site-editor.1.1.1.zip && \
    unzip /usr/src/wordpress/wp-content/plugins/site-editor.zip -d /usr/src/wordpress/wp-content/plugins/ && \
    rm /usr/src/wordpress/wp-content/plugins/site-editor.zip

# Set ownership and permissions
RUN chown -R www-data:www-data /usr/src/wordpress/wp-content/plugins/site-editor

# Expose port 80 for web server
EXPOSE 80

# Start WordPress
CMD [""apache2-foreground""]"	Generate a dockerfile of Wordpress with Plugin Site Editor 1.1.1 and mysql server	"# Use the official WordPress image
FROM wordpress:latest

# Set environment variables for MySQL
ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=wordpress
ENV MYSQL_USER=wordpress
ENV MYSQL_PASSWORD=wordpress

# Install MySQL server
RUN docker-php-ext-install mysqli && docker-php-ext-enable mysqli

# Download and install the Site Editor plugin version 1.1.1
RUN curl -o /usr/src/wordpress/wp-content/plugins/site-editor.zip -SL https://downloads.wordpress.org/plugin/site-editor.1.1.1.zip \
    && unzip -q /usr/src/wordpress/wp-content/plugins/site-editor.zip -d /usr/src/wordpress/wp-content/plugins/ \
    && rm /usr/src/wordpress/wp-content/plugins/site-editor.zip

# Expose ports
EXPOSE 80

# Start the WordPress installation
CMD [""apache2-foreground""]"	"Clustered version seems to work, but the download url doesn’t exist and there’s no info about this plugin on internet, even the exploitdb page says that the owner of the plugin didn’t answer to the CVE fix request from 2018

Single version can’t work, because there’s no MySQL server since GPT explicitly said that assumed a mysql server already setup and running"
Unauthenticated information disclosure (https://www.exploit-db.com/exploits/51334) CVE-2023-23752	Generate a dockerfile of Joomla! v4.2.7  (using its base image)	"# Use the official PHP Apache image as the base image
FROM php:7.4-apache

# Set environment variables
ENV JOOMLA_VERSION 4.2.7

# Set up Apache rewrite module for Joomla URL rewriting
RUN a2enmod rewrite

# Install required PHP extensions
RUN docker-php-ext-install pdo pdo_mysql mysqli

# Download and install Joomla
RUN set -ex; \
    curl -o joomla.tar.bz2 -fSL ""https://downloads.joomla.org/cms/joomla4/$JOOMLA_VERSION/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.bz2""; \
    tar -xjf joomla.tar.bz2 -C /var/www/html/; \
    rm joomla.tar.bz2; \
    chown -R www-data:www-data /var/www/html/

# Expose port 80
EXPOSE 80

# Start Apache
CMD [""apache2-foreground""]


SECOND REQUEST
# Use the official Joomla v4.2.7 image as the base image
FROM joomla:4.2.7

# Optionally, you can add additional configurations or dependencies here"	Generate a dockerfile of Joomla! v4.2.8 with a mysql database	"# Use the official Joomla! image
FROM joomla:4.2.7-php8.0-apache

# Set environment variables for MySQL
ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=joomla
ENV MYSQL_USER=joomla
ENV MYSQL_PASSWORD=joomla

# Expose ports
EXPOSE 80

# Start the Joomla! installation
CMD [""apache2-foreground""]"	"Clustered version opted for a self building option, but if it’s asked again specifying to use the native base image, it’s just one line; the only problem was the version was 4-2-8 in the download url; working perfectly with the given exploit  Both version work the same way, but of course the second one is simpler, just one line, and faster and lighter, since it’s the official version

Single version can’t work, because there’s no MySQL server since GPT explicitly said that assumed a mysql server already setup and running, but it’s pretty much the same Dockerfile as the clustered version"
SQL Injection (https://www.exploit-db.com/exploits/46467) CVE-2018-17380	Generate a dockerfile of Joomla with Plugin Component Article Factory Manager 4.3.9	"# Use the official Joomla image as base
FROM joomla:latest

# Maintainer information
LABEL maintainer=""Your Name <your_email@example.com>""

# Install unzip to extract Joomla extensions
RUN apt-get update && apt-get install -y unzip

# Download and install Article Factory Manager plugin
RUN curl -L https://downloads.joomla.org/extensions/downloads/factory-downloads/factory-article-manager/factory-article-manager-4-3-9/download -o /tmp/factory-article-manager.zip \
    && unzip /tmp/factory-article-manager.zip -d /tmp \
    && mv /tmp/com_factory-4.3.9 /var/www/html/plugins \
    && chown -R www-data:www-data /var/www/html/plugins

# Cleanup
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*

# Expose port 80
EXPOSE 80"	Generate a dockerfile of Joomla with Plugin Component Article Factory Manager 4.3.9 with mysql server	"# Use official Joomla image as base
FROM joomla:<your-joomla-version>

# Install wget and unzip
RUN apt-get update && \
    apt-get install -y wget unzip && \
    rm -rf /var/lib/apt/lists/*

# Download Article Factory Manager plugin
RUN wget https://downloads.joomla.org/extensions/news-production/article-factory-manager/4-3-9/com_articlefactorymanager-4.3.9.zip

# Unzip Article Factory Manager plugin
RUN unzip com_articlefactorymanager-4.3.9.zip -d /usr/src/joomla/plugins

# Remove zip file
RUN rm com_articlefactorymanager-4.3.9.zip

# Set permissions
RUN chown -R www-data:www-data /usr/src/joomla/plugins/articlefactorymanager

# Expose port
EXPOSE 80

# Start Apache and MySQL
CMD [""apache2-foreground""]"	"Both clustered and single version have broken link because the said plugin isn’t available anywhere on internet, but it seems to be well setup
As always single version supposed mysql server even if it was asked to generate it too"
SQL Injection (https://www.exploit-db.com/exploits/45465) CVE-2018-17375	Generate a dockerfile of Joomla with Music Collector Component 3.0.3	"# Base image
FROM php:7.4-apache

# Set environment variables
ENV JOOMLA_VERSION 3.9.28
ENV MUSIC_COLLECTION_VERSION 3.0.3

# Install dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        unzip \
        libxml2-dev \
        zlib1g-dev \
        libzip-dev \
    && docker-php-ext-install \
        pdo_mysql \
        xml \
        zip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Download and extract Joomla
RUN mkdir -p /usr/src/joomla \
    && curl -L https://downloads.joomla.org/cms/joomla3/${JOOMLA_VERSION}/Joomla_${JOOMLA_VERSION}-Stable-Full_Package.tar.gz | tar xz -C /usr/src/joomla --strip-components=1

# Download and extract Music Collection Component
RUN mkdir -p /usr/src/music_collection \
    && curl -L https://github.com/joachimesque/music_collection/releases/download/${MUSIC_COLLECTION_VERSION}/com_music_collection-${MUSIC_COLLECTION_VERSION}.zip -o /tmp/music_collection.zip \
    && unzip -d /usr/src/music_collection /tmp/music_collection.zip \
    && rm /tmp/music_collection.zip

# Move Music Collection Component to Joomla extensions directory
RUN mv /usr/src/music_collection /usr/src/joomla/media/com_music_collection

# Copy Joomla files to Apache document root
RUN rm -rf /var/www/html/*
COPY --chown=www-data:www-data /usr/src/joomla /var/www/html

# Configure Apache
RUN a2enmod rewrite
COPY apache2.conf /etc/apache2/apache2.conf

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html

# Expose port
EXPOSE 80

# Start Apache
CMD [""apache2-foreground""]"	Generate a dockerfile of Joomla with Music Collector Component 3.0.3 service	"# Use the official Joomla image as base
FROM joomla:latest

# Maintainer information
LABEL maintainer=""Your Name <your.email@example.com>""

# Set environment variables
ENV JOOMLA_HOME /var/www/html

# Install required PHP extensions for Music Collection Component
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        php-xml \
        php-zip \
        unzip \
        && rm -rf /var/lib/apt/lists/*

# Download and install Music Collection Component
RUN curl -o /tmp/music_collection.zip -fSL https://downloads.sourceforge.net/project/musiccollection3/Music%20Collection%203/3.0.3/com_musiccollection_3.0.3_j3x.zip \
    && unzip /tmp/music_collection.zip -d /tmp/ \
    && mv /tmp/com_musiccollection /tmp/com_musiccollection_temp \
    && mv /tmp/com_musiccollection_temp/* $JOOMLA_HOME/components/ \
    && chown -R www-data:www-data $JOOMLA_HOME/components/com_musiccollection/ \
    && rm -rf /tmp/*

# Set up MySQL service
RUN apt-get update && \
    apt-get install -y mysql-server && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /var/run/mysqld && \
    chown -R mysql:mysql /var/run/mysqld && \
    chmod 777 /var/run/mysqld && \
    mkdir -p /var/lib/mysql && \
    chown -R mysql:mysql /var/lib/mysql

# Expose ports
EXPOSE 80 3306

# Copy custom configuration
COPY config.php $JOOMLA_HOME/configuration.php

# Start MySQL service
CMD [""mysqld_safe""]"	"Both clustered and single version have broken link because the said plugin isn’t available anywhere on internet, one problem was the version was 4-2-8 in the download url;
As always single version supposed mysql server even if it was asked to generate it too"
XML External Entity Expansion / Remote Code Execution (https://www.exploit-db.com/exploits/43009) CVE-2017-12629	Generate a dockerfile of Apache Solr 7.0.1	"# Use official Java 8 image as base image
FROM openjdk:8-jre-alpine

# Set environment variables
ENV SOLR_VERSION 7.0.1
ENV SOLR solr-$SOLR_VERSION

# Download and extract Apache Solr
RUN wget https://archive.apache.org/dist/lucene/solr/$SOLR_VERSION/$SOLR.tgz && \
    tar -xzf $SOLR.tgz && \
    rm $SOLR.tgz && \
    mv $SOLR /opt/solr

# Set Solr home
ENV SOLR_HOME /opt/solr/server/solr

# Set working directory
WORKDIR /opt/solr

# Expose Solr port
EXPOSE 8983

# Start Solr
CMD [""/opt/solr/bin/solr"", ""start"", ""-f""]"	Generate a dockerfile of Apache Solr 7.0.1 using native image	"# Use a base image compatible with native images, such as GraalVM
FROM <native_image_base_image>

# Set environment variables
ENV SOLR_VERSION 7.0.1
ENV SOLR solr-$SOLR_VERSION

# Download and extract Apache Solr
RUN wget https://archive.apache.org/dist/lucene/solr/$SOLR_VERSION/$SOLR.tgz && \
    tar -xzf $SOLR.tgz && \
    rm $SOLR.tgz && \
    mv $SOLR /opt/solr

# Set Solr home
ENV SOLR_HOME /opt/solr/server/solr

# Set working directory
WORKDIR /opt/solr

# Expose Solr port
EXPOSE 8983

# Start Solr
CMD [""/opt/solr/bin/solr"", ""start"", ""-f""]"	"Java base image doesn’t have classic BASH shell, needed to change base image to normal one, not alpine, and Solr can’t start with root user, need to force it
It has some configuration problem too difficult to handle
The single version will be another prompt asking to use the native base image, but GPT doesn’t have any information about Solr Docker Image"
Remote Code Execution (https://www.exploit-db.com/exploits/41570) CVE-2017-5638	Generate a dockerfile of Apache Struts 2.5	"# Use a base image
FROM tomcat:8.5-jre8

# Set environment variables
ENV STRUTS_VERSION 2.5
ENV STRUTS_HOME /usr/local/tomcat/webapps/ROOT

# Update package lists and install necessary packages
RUN apt-get update && apt-get install -y wget unzip && \
    rm -rf /var/lib/apt/lists/*

# Download and extract Struts 2.5
RUN wget https://archive.apache.org/dist/struts/struts-2/$STRUTS_VERSION/struts-2.5-all.zip && \
    unzip struts-2.5-all.zip -d /tmp && \
    cp -Rv /tmp/struts-2.5*/struts2-blank* $STRUTS_HOME && \
    rm -rf /tmp/struts-2.5*

# Expose default port
EXPOSE 8080

# Start Tomcat
CMD [""catalina.sh"", ""run""]"	Generate a dockerfile of Apache Struts 2.5 with a fully working example project  already deployed	"# Use the official Tomcat 9 image as the base image
FROM tomcat:9

# Set environment variables
ENV STRUTS_VERSION=2.5.26
ENV STRUTS_EXAMPLE_VERSION=2.5.26

# Download Apache Struts and Example application
RUN wget https://downloads.apache.org/struts/${STRUTS_VERSION}/struts-2.5.26-all.zip && \
    unzip struts-2.5.26-all.zip && \
    mv struts-2.5.26-all/lib/* /usr/local/tomcat/lib/ && \
    rm -rf struts-2.5.26-all struts-2.5.26-all.zip

# Deploy the example application
RUN wget https://downloads.apache.org/struts/${STRUTS_EXAMPLE_VERSION}/struts2-examples-${STRUTS_EXAMPLE_VERSION}.war -P /usr/local/tomcat/webapps/ && \
    unzip /usr/local/tomcat/webapps/struts2-examples-${STRUTS_EXAMPLE_VERSION}.war -d /usr/local/tomcat/webapps/struts2-examples && \
    rm -rf /usr/local/tomcat/webapps/struts2-examples-${STRUTS_EXAMPLE_VERSION}.war

# Expose port 8080
EXPOSE 8080

# Start Tomcat
CMD [""catalina.sh"", ""run""]"	"Download URL have one extra directory ""/struts-2/"", copy command had one not existing path, too hard to configure maven project, tomcat and the exploit itsefl
Single version is another way to ask GPT, the first time gave the same answer, the second time gave another answer trying to gather an example from apache site, but both url are wrong"
Remote Code Execution (https://www.exploit-db.com/exploits/44448) CVE-2018-7600	Generate a dockerfile of Drupal 8.5.0	"# Use official Drupal image as the base image
FROM drupal:8.5.0

# Set the working directory in the container
WORKDIR /var/www/html/themes

# Install any additional dependencies if needed
# For example, you can run:
# RUN apt-get update && apt-get install -y <package-name>

# Copy your custom theme files from the host into the container
COPY custom_theme /var/www/html/themes/custom_theme

# Set permissions on the theme directory
RUN chown -R www-data:www-data /var/www/html/themes/custom_theme

# Expose port 80
EXPOSE 80"	Generate a dockerfile of Drupal 8.5.0 adding a mariadb server running in background	"# Use the official Drupal image as the base
FROM drupal:8.5.0

# Install required PHP extensions
RUN apt-get update && apt-get install -y \
        libpng-dev \
        libjpeg-dev \
        libpq-dev \
        libxml2-dev \
    && docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install -j$(nproc) \
        gd \
        opcache \
        pdo_mysql \
        pdo_pgsql \
        mysqli \
        xml \
        mbstring \
        zip

# Install MariaDB server
RUN apt-get update && apt-get install -y mariadb-server

# Copy custom configuration files if needed
# COPY php.ini /usr/local/etc/php/
# COPY apache.conf /etc/apache2/sites-available/000-default.conf

# Expose ports
EXPOSE 80
EXPOSE 3306

# Set up entry point to start both Drupal and MariaDB
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]"	"Copy and chown command are customization not needed that block building process in Composed Version, but after wizard setup the exploit worked
Single version has good potential with exntrypoint starting both services, but the Debian based image is too old and give some problems related to apt sources hard or too long to fix"
Authentication Bypass / SQL Injection (https://www.exploit-db.com/exploits/37530) CVE-2018-3811 / CVE-2018-3810	Generate a dockerfile of Wordpress with Plugin Smart Google Code Inserter 3.4				
