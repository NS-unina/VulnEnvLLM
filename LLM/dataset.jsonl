{"input": "Generate a dockerfile of Wordpress with Plugin AN_Gradebook <= 5.0.1", "output": "# Use an official WordPress image as the base image\nFROM wordpress:latest\n\n# Set the working directory to the WordPress plugins directory\nWORKDIR /var/www/html/wp-content/plugins\n\nRUN apt update -y && apt install -y unzip\n# Download and install the AN_Gradebook plugin version 5.0.1\nRUN curl -o an-gradebook.zip -SL https://downloads.wordpress.org/plugin/an-gradebook.5.0.1.zip \\\n    && unzip an-gradebook.zip \\\n    && rm an-gradebook.zip\n\n# Set the working directory back to the WordPress root directory\nWORKDIR /var/www/html"}
{"input": "Generate a dockerfile of Wordpress with WP-UserOnline 2.88.0 enabled", "output": "# Use an official WordPress image as the base image\nFROM wordpress:latest\n\n# Set the working directory to the WordPress plugins directory\nWORKDIR /var/www/html/wp-content/plugins\nRUN apt update -y && apt install -y curl unzip\n# Download and install the WP-UserOnline plugin version 2.88.0\nRUN curl -o wp-useronline.zip -SL https://downloads.wordpress.org/plugin/wp-useronline.2.88.0.zip \\\n    && unzip wp-useronline.zip \\\n    && rm wp-useronline.zip\n\n# Set the working directory back to the WordPress root directory\nWORKDIR /var/www/html"}
{"input": "Generate a dockerfile of Wordpress with Plugin Form Maker 1.12.20", "output": "# Use the official WordPress image as the base image\nFROM wordpress:latest\n\n# Set the working directory to the WordPress plugins directory\nWORKDIR /var/www/html/wp-content/plugins/\nRUN apt-get update -y && apt-get install -y unzip\n# Download and install Form Maker plugin version 1.12.20\nRUN curl -O https://downloads.wordpress.org/plugin/form-maker.1.12.20.zip \\\n    && unzip form-maker.1.12.20.zip \\\n    && rm form-maker.1.12.20.zip\n\n# Set the working directory back to the WordPress root directory\nWORKDIR /var/www/html/\n\n# Expose port 80 for HTTP\nEXPOSE 80\n\n# Start the WordPress service\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Joomla! v4.2.7", "output": "# Use the official WordPress image\nFROM wordpress:latest\n\n# Set environment variables\nENV WORDPRESS_DB_HOST=db \\\n    WORDPRESS_DB_USER=wordpress \\\n    WORDPRESS_DB_PASSWORD=wordpress \\\n    WORDPRESS_DB_NAME=wordpress\n\n# Install necessary tools and dependencies\nRUN apt-get update && \\\n    apt-get install -y unzip && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Download and install the Site Editor Plugin version 1.1.1\nRUN curl -o /usr/src/wordpress/wp-content/plugins/site-editor.zip -SL https://downloads.wordpress.org/plugin/site-editor.1.1.1.zip && \\\n    unzip /usr/src/wordpress/wp-content/plugins/site-editor.zip -d /usr/src/wordpress/wp-content/plugins/ && \\\n    rm /usr/src/wordpress/wp-content/plugins/site-editor.zip\n\n# Set ownership and permissions\nRUN chown -R www-data:www-data /usr/src/wordpress/wp-content/plugins/site-editor\n\n# Expose port 80 for web server\nEXPOSE 80\n\n# Start WordPress\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Joomla! v4.2.7 using its base image", "output": "# Use the official Joomla v4.2.7 image as the base image\nFROM joomla:4.2.7\n\n# Optionally, you can add additional configurations or dependencies here"}
{"input": "Generate a dockerfile of Drupal 8.5.0", "output": "# Use official Drupal image as the base image\nFROM drupal:8.5.0\n\n# Set the working directory in the container\nWORKDIR /var/www/html/themes\n\n# Expose port 80\nEXPOSE 80"}
{"input": "Generate a dockerfile of Wordpress with Plugin Smart Google Code Inserter 3.4", "output": "# Use the official WordPress image as base\nFROM wordpress:latest\n\n# Set up environment variables for MySQL\nENV WORDPRESS_DB_HOST=db \\\n    WORDPRESS_DB_USER=wordpress \\\n    WORDPRESS_DB_PASSWORD=password \\\n    WORDPRESS_DB_NAME=wordpress\n\n# Install wget and unzip\nRUN apt-get update && apt-get install -y wget unzip\n\n# Download Smart Google Code Inserter plugin\nRUN wget -O /tmp/smart-google-code-inserter.zip https://downloads.wordpress.org/plugin/smart-google-code-inserter.3.4.zip\n\n# Install the plugin\nRUN unzip /tmp/smart-google-code-inserter.zip -d /usr/src/wordpress/wp-content/plugins/ \\\n    && rm /tmp/smart-google-code-inserter.zip\n\n# Set permissions\nRUN chown -R www-data:www-data /usr/src/wordpress/wp-content/plugins/smart-google-code-inserter\n\n# Expose port 80\nEXPOSE 80\n\n# Start the WordPress server\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Wordpress with Plugin HDW Player 2.4.2", "output": "# Use the official WordPress image\nFROM wordpress:latest\n\n# Set environment variables\nENV WORDPRESS_DB_HOST=localhost \\\n    WORDPRESS_DB_USER=wordpress \\\n    WORDPRESS_DB_PASSWORD=wordpress \\\n    WORDPRESS_DB_NAME=wordpress \\\n    HDW_PLAYER_VERSION=2.4.2\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n    wget \\\n    unzip\n\n# Download and install HDW Player plugin\nRUN wget -P /tmp https://downloads.wordpress.org/plugin/hdw-player-video-player-video-gallery.${HDW_PLAYER_VERSION}.zip \\\n    && unzip /tmp/hdw-player-video-player-video-gallery.${HDW_PLAYER_VERSION}.zip -d /usr/src/wordpress/wp-content/plugins/ \\\n    && rm /tmp/hdw-player-video-player-video-gallery.${HDW_PLAYER_VERSION}.zip\n\n# Set permissions\nRUN chown -R www-data:www-data /usr/src/wordpress/wp-content/plugins/hdw-player-video-player-video-gallery\n\n# Cleanup\nRUN apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Expose port\nEXPOSE 80\n\n# Start WordPress\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Apache Tomcat 8.5.0", "output": "# Use the official Tomcat 9 image from Docker Hub\nFROM tomcat:8.5.0\n\n# Expose the default Tomcat port\nEXPOSE 8080"}
{"input": "Generate a dockerfile of Drupal 8.6.9", "output": "# Use the official Drupal image as base\nFROM drupal:8.6.9\n\n# Set environment variables\nENV DRUPAL_HOME=/var/www/html \\\n    DRUPAL_CORE_VERSION=8.6.9\n\n# Expose ports\nEXPOSE 80\n\n# Start Apache server\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Drupal 8.6.9 using its native image, then install in the same image a mariadb server, finally run in background both the mariadb and drupal service", "output": "# Use the official Drupal image\nFROM drupal:8.6.9\n\nRUN echo \"deb http://archive.debian.org/debian/ stretch main contrib non-free\" > /etc/apt/sources.list && \\\n    echo \"deb http://archive.debian.org/debian/ stretch-proposed-updates main contrib non-free\" >> /etc/apt/sources.list && \\\n    echo \"deb http://archive.debian.org/debian-security stretch/updates main contrib non-free\" >> /etc/apt/sources.list\n# Install dependencies\nRUN apt-get --allow-unauthenticated update && \\\n    apt-get install -y --allow-unauthenticated mariadb-server && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Expose ports for Drupal and MariaDB\nEXPOSE 80\nEXPOSE 3306\n\n# Define environment variables\nENV MYSQL_ROOT_PASSWORD=root\nENV MYSQL_DATABASE=drupal\nENV MYSQL_USER=drupal\nENV MYSQL_PASSWORD=drupal\n\n# Start MariaDB service\nRUN service mysql start\n\n# Start Drupal service\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of osTicket-v1.12", "output": "# Use an official PHP image as base\nFROM php:7.4-apache\n\nRUN apt-get update && apt-get install -y wget zlib1g-dev libpng-dev libicu-dev unzip default-mysql-client\n# Install required PHP extensions\nRUN docker-php-ext-install mysqli && docker-php-ext-install gd && docker-php-ext-install gettext && docker-php-ext-install intl\n\n# Set recommended PHP.ini settings\nRUN echo 'date.timezone = \"UTC\"' > /usr/local/etc/php/php.ini\nRUN echo 'memory_limit = 256M' >> /usr/local/etc/php/php.ini\nRUN echo 'upload_max_filesize = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'post_max_size = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'max_execution_time = 600' >> /usr/local/etc/php/php.ini\n\n# Download and install osTicket v1.12\nWORKDIR /var/www/html\nRUN apt-get update && apt-get install -y wget\nRUN wget https://github.com/osTicket/osTicket/releases/download/v1.12/osTicket-v1.12.zip\nRUN unzip osTicket-v1.12.zip\nRUN rm osTicket-v1.12.zip\nRUN chown -R www-data:www-data upload\nRUN a2enmod rewrite\n\n# Expose ports\nEXPOSE 80\n\n# Start Apache\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Uvdesk v1.1.3", "output": "# Use an official PHP image as base\nFROM php:7.4-apache\n\n# Install required dependencies\nRUN apt-get update && apt-get install -y unzip libc-client-dev libkrb5-dev\n\n# Install required PHP extensions\nRUN docker-php-ext-configure imap --with-kerberos --with-imap-ssl\nRUN docker-php-ext-install pdo_mysql imap mysqli\nRUN pecl install mailparse && docker-php-ext-enable mailparse\n# Set recommended PHP.ini settings\nRUN echo 'date.timezone = \"UTC\"' > /usr/local/etc/php/php.ini\nRUN echo 'memory_limit = 512M' >> /usr/local/etc/php/php.ini\nRUN echo 'upload_max_filesize = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'post_max_size = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'max_execution_time = 600' >> /usr/local/etc/php/php.ini\n\n# Enable Apache modules\nRUN a2enmod rewrite\n\n# Download and install Uvdesk v1.1.3\nWORKDIR /var/www/html\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && composer create-project uvdesk/community-skeleton helpdesk-project v1.1.3 && chown -R www-data:www-data /var/www/html/helpdesk-project\n# Expose ports\nEXPOSE 80\n\n# Start Apache\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of nostromo 1.9.6", "output": "# Use an official Ubuntu base image\nFROM ubuntu:18.04\n\n# Install necessary dependencies\nRUN apt-get update && apt-get install -y build-essential libssl-dev groff-base && rm -rf /var/lib/apt/lists/*\n\n# Download and compile nostromo 1.9.6\nWORKDIR /tmp\nRUN apt-get update && apt-get install -y wget && wget http://www.nazgul.ch/dev/nostromo-1.9.6.tar.gz && tar -zxvf nostromo-1.9.6.tar.gz && rm nostromo-1.9.6.tar.gz && cd nostromo-1.9.6 && make && make install\nCOPY nhttpd.conf /var/nostromo/conf/nhttpd.conf\n# Expose the default port used by nostromo (8080)\nEXPOSE 8080\n\n# Run nostromo as a foreground process\nCMD [\"nhttpd\"]"}
{"input": "Create a dockerfile of SPIP 3.1.1", "output": "# Use an official PHP with Apache image as base\nFROM php:7.4-apache\n\n# Set the working directory inside the container\nWORKDIR /var/www/html\n\n# Download and extract SPIP 3.1.1\nRUN apt-get update && apt-get install -y wget unzip && wget https://files.spip.net/spip/archives/SPIP-v3.1.1.zip -O spip.zip && unzip spip.zip && rm spip.zip && chown -R www-data:www-data .\n\n# Create a .htaccess file with recommended settings\nRUN echo \"php_flag magic_quotes_gpc off\" > /var/www/html/.htaccess && echo \"php_flag register_globals off\" >> /var/www/html/.htaccess && echo \"php_flag display_errors off\" >> /var/www/html/.htaccess && echo \"Options -Indexes\" >> /var/www/html/.htaccess\n\n# Expose port 80 for Apache\nEXPOSE 80\n\n# Set recommended PHP.ini settings\nRUN echo 'date.timezone = \"UTC\"' > /usr/local/etc/php/php.ini\nRUN echo 'memory_limit = 256M' >> /usr/local/etc/php/php.ini\nRUN echo 'upload_max_filesize = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'post_max_size = 100M' >> /usr/local/etc/php/php.ini\nRUN echo 'max_execution_time = 600' >> /usr/local/etc/php/php.ini\n\n# Start Apache\nCMD [\"apache2-foreground\"]"}
{"input": "Create a dockerfile of copyparty 1.8.1", "output": "# Use an official Python image as base\nFROM python:3.9-slim\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Clone copyparty from GitHub\nRUN apt-get update && apt-get install -y wget\nRUN wget https://github.com/9001/copyparty/releases/download/v1.8.2/copyparty-sfx.py -O cp.py\n\n# Expose the default port used by copyparty (replace 8000 with the actual port)\nEXPOSE 80 3923\n\n\n# Specify the command to run copyparty\nCMD [\"python\", \"cp.py\"]"}
{"input": "Create a dockerfile of Apache HTTP Server 2.4.49", "output": "# Use an official Apache HTTP Server image as base\nFROM httpd:2.4.49-alpine\n\n# Expose port 80 for Apache\nEXPOSE 80\n\n# Start Apache\nCMD [\"httpd-foreground\"]"}
{"input": "Create a dockerfile of Apache 2.4.50", "output": "# Use an official Apache HTTP Server image as the base image\nFROM httpd:2.4.50\n\n# Expose the port that Apache will run on (default is 80)\nEXPOSE 80\n\n# Command to run Apache in the foreground\nCMD [\"httpd-foreground\"]"}
{"input": "Generate a dockerfile of PhpCollab 2.5.1", "output": "# Use an official PHP and Apache image as the base image\nFROM php:7.4-apache\n\n# Set the working directory inside the container\nWORKDIR /var/www/html\n\nRUN apt-get update && apt-get install -y wget libz-dev libpng-dev libicu-dev unzip\n# Download and extract PhpCollab 2.5.1\nRUN curl -o phpCollab.zip -SL https://github.com/phpcollab/phpcollab/releases/download/v2.5.1/phpcollab-v2.5.1.zip \\\n    && unzip phpCollab.zip \\\n    && rm phpCollab.zip\n\n# Set permissions (adjust as needed)\nRUN chown -R www-data:www-data .\n\nRUN docker-php-ext-install mysqli && docker-php-ext-install gd && docker-php-ext-install gettext && docker-php-ext-install intl\n\n# Expose the port that Apache will run on (default is 80)\nEXPOSE 80\n\n# Command to run Apache in the foreground\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of Python 3.7.x, with Django, and with PostgreSQL 9.5", "output": "# Use an official Python runtime as a parent image\nFROM python:3.7\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# Set the working directory in the container\nWORKDIR /app\n\nRUN pip install --upgrade pip && pip install django\nRUN django-admin startproject testproject\nWORKDIR /app/testproject\n# Expose the port that Django will run on\nEXPOSE 8000\n\n# Run the command to start Django development server\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]"}
{"input": "Create a dockerfile of Grafana 6.2.4", "output": "# Use an official Grafana base image\nFROM grafana/grafana:6.2.4\n\n# Expose the port Grafana runs on\nEXPOSE 3000\n\n# Start Grafana\nCMD [\"grafana-server\", \"--config=/etc/grafana/grafana.ini\"]"}
{"input": "Generate a dockerfile of Bludit 3.9.2", "output": "# Use the official PHP and Apache image\nFROM php:7.4-apache\n\n# Set the working directory to /var/www/html\nWORKDIR /var/www/html\n\n# Download and install dependencies\nRUN apt-get update && \\\n    apt-get install -y unzip libpng-dev zlib1g-dev libxml2-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install required PHP extensions\nRUN docker-php-ext-install gd json dom\n# Download and install Bludit\nRUN curl -o bludit.zip -SL https://github.com/bludit/bludit/archive/3.9.2.zip && \\\n    unzip bludit.zip && \\\n    rm bludit.zip && \\\n    mv bludit-3.9.2/* . && \\\n    rm -r bludit-3.9.2\n\n# Set up permissions\nRUN chown -R www-data:www-data /var/www/html && \\\n    chmod -R 755 /var/www/html\n\n# Expose port 80\nEXPOSE 80\n\n# Start Apache\nCMD [\"apache2-foreground\"]"}
{"input": "Generate a dockerfile of OpenSSH", "output": "# Use a base image with a Linux distribution\nFROM ubuntu:18.04\n\n# Install OpenSSH server\nRUN apt-get update && \\\n    apt-get install -y openssh-server && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Create a directory for SSH keys\nRUN mkdir /var/run/sshd\n\n# Expose the SSH port\nEXPOSE 22\n\n# Start the SSH service\nCMD [\"/usr/sbin/sshd\", \"-D\"]"}
{"input": "Generate a dockerfile of OpenSSH 7.7 building from source", "output": "# Use a base image with necessary dependencies\nFROM ubuntu:16.04\n\n# Install required packages\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    wget \\\n    libssl-dev \\\n    zlib1g-dev\n\n# Download OpenSSH source\nRUN wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.7p1.tar.gz\n\n# Extract OpenSSH source\nRUN tar -xzf openssh-7.7p1.tar.gz\n\n# Change directory to OpenSSH source\nWORKDIR /openssh-7.7p1\n\n# Configure and build OpenSSH\nRUN ./configure && \\\n    make && \\\n    make install\n\n# Cleanup\nRUN rm -rf /openssh-7.7p1* && \\\n    apt-get purge -y build-essential wget && \\\n    apt-get autoremove -y && \\\n    apt-get clean\n\n# Expose SSH port\nRUN groupadd sshd && useradd -g 33 -c sshd -d / sshd\nEXPOSE 22\n\n# Start SSH service\nCMD [\"/usr/local/sbin/sshd\", \"-D\"]"}
{"input": "Generate a dockerfile of apache2 with OpenSSL 1.0.1", "output": "FROM ubuntu:16.04\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y \\\n    apache2 \\\n    && apt-get install -y \\\n    build-essential \\\n    wget \\\n    zlib1g-dev\n\nWORKDIR /usr/local/src\n\n# Downloading OpenSSL 1.0.1 before version 1.0.1g\nRUN wget https://www.openssl.org/source/old/1.0.1/openssl-1.0.1e.tar.gz \\\n    && tar -xzvf openssl-1.0.1e.tar.gz \\\n    && rm openssl-1.0.1e.tar.gz\n\nWORKDIR /usr/local/src/openssl-1.0.1e\n\n# Configure, compile, and install OpenSSL\nRUN ./config \\\n    && make \\\n    && make install_sw \\\n    && ldconfig\n\n# Enable SSL module for Apache\nRUN a2enmod ssl\n\nEXPOSE 80\nEXPOSE 443\n\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]"}
{"input": "Generate a dockerfile of Samba", "output": "# Use a base image with a suitable Linux distribution\nFROM ubuntu:16.04\n\n# Install necessary packages\nRUN apt-get update && \\\n    apt-get install -y samba && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Expose Samba ports\nEXPOSE 137/udp 138/udp 139/tcp 445/tcp\n\n# Start Samba service\nCMD [\"smbd\", \"--foreground\", \"--log-stdout\"]"}
{"input": "Generate a dockerfile of Samba 4.x before 4.4.14 building from source", "output": "# Use a base image with necessary dependencies for building\nFROM ubuntu:20.04\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install required dependencies\nRUN apt-get update && \\\n    apt-get install -y acl attr autoconf bind9utils bison build-essential \\\n    debhelper dnsutils docbook-xml docbook-xsl flex gdb libjansson-dev krb5-user \\\n    libacl1-dev libaio-dev libarchive-dev libattr1-dev libblkid-dev libbsd-dev \\\n    libcap-dev libcups2-dev libgnutls28-dev libgpgme-dev libjson-perl \\\n    libldap2-dev libncurses5-dev libpam0g-dev libparse-yapp-perl \\\n    libpopt-dev libreadline-dev nettle-dev perl perl-modules pkg-config \\\n    python-all-dev python-crypto python2-dbg python-dev python-dnspython \\\n    python3-dnspython python3-gpg python-markdown python3-markdown \\\n    python3-dev xsltproc zlib1g-dev liblmdb-dev lmdb-utils wget\n\n# Download and extract the Samba source code\nRUN wget https://download.samba.org/pub/samba/samba-4.4.16.tar.gz && \\\n    tar -xzvf samba-4.4.16.tar.gz && \\\n    cd samba-4.4.16\n\n# Configure and build Samba\nRUN cd samba-4.4.16 && \\\n    ./configure && \\\n    make && \\\n    make install\n\nENV PATH=\"/usr/local/samba/bin:/usr/local/samba/sbin:${PATH}\"\nCOPY smb.conf /usr/local/samba/etc/smb.conf\n\n# Expose the default Samba ports\nEXPOSE 137/udp 138/udp 139/tcp 445/tcp\n\nRUN (echo test; echo test) | smbpasswd -s -a root\n\n# Set the entry point\nENTRYPOINT [\"smbd\", \"--foreground\", \"--no-process-group\"]"}
{"input": "Create a dockerfile of C program using librsvg 2.56.2", "output": "# Use the official Ubuntu base image\nFROM ubuntu:latest\n\n# Update packages and install necessary dependencies\nRUN apt-get update && apt-get install -y \\\n    gcc \\\n    libc6-dev \\\n    librsvg2-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set the working directory in the container\nWORKDIR /\n\n# Copy the source code into the container\nCOPY svg_processor.c .\n\n# Compile the C program\nRUN gcc -o svg_processor svg_processor.c `pkg-config --cflags --libs librsvg-2.0`\n\n# Set the entry point for the container\nCMD [\"tail\", \"-f\", \"/dev/null\"]"}
{"input": "Create a dockerfile of C program using librsvg 2.56.2 building from source", "output": "# Use a base image with necessary development tools and libraries\nFROM ubuntu:latest\nENV PATH \"${PATH}:/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0\"\n\n# Install necessary packages for building librsvg and running the C program\nRUN apt-get update && \\\n    apt-get install -y \\\n    build-essential \\\n    pkg-config \\\n    libglib2.0-dev \\\n    libcairo2-dev \\\n    libxml2-dev \\\n    git \\\n    wget \\\n    dh-autoreconf \\\n    gobject-introspection \\\n    libgirepository1.0-dev \\\n    cargo \\\n    libgdk-pixbuf2.0-dev \\\n    libharfbuzz-dev \\\n    libpango1.0-dev\n    \n# Clone librsvg from source\nRUN git clone --branch 2.56.2 --depth 1 https://gitlab.gnome.org/GNOME/librsvg.git /librsvg\n\n# Build and install librsvg\nRUN cd /librsvg && \\\n    autoreconf -f -i && \\\n    ./autogen.sh && \\\n    make && \\\n    make install && \\\n    ldconfig\n\n# Create a directory for your C program\nRUN mkdir /app\nWORKDIR /app\n\n# Copy your C source code into the container\nCOPY main.c /app/\n\n# Compile the C program\nRUN gcc -o program main.c `pkg-config --cflags --libs librsvg-2.0`\n\n# Set the entry point to your program\nENTRYPOINT [\"./program\"]"}
{"input": "Generate a dockerfile of Ruby before 2.4.3", "output": "# Use an official Ruby runtime as the base image\nFROM ruby:2.4.2\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the application code into the container\nCOPY app.rb /app/app.rb\n\n# Expose port 3000 to the outside world\nEXPOSE 2121 23461 23421\n\n# Command to run the application\nCMD [\"ruby\", \"app.rb\"]"}
{"input": "Generate a dockerfile of OpenSMTPD", "output": "# Use a Debian base image\nFROM debian:buster-slim\n\n# Install necessary packages\nRUN apt-get update && \\\n    apt-get install -y opensmtpd\n\nRUN sed -i 's/localhost/127.0.0.1/g' /etc/smtpd.conf # replaces all instances in a line \nRUN echo 'localhost' > /etc/mailname\n\n# Expose SMTP port\nEXPOSE 25\n\n# Start OpenSMTPD\nCMD [\"smtpd\", \"-d\"]"}
{"input": "Generate a dockerfile of OpenSMTPD 6.6 building from source", "output": "# Use a base image with the necessary tools and libraries\nFROM alpine:latest\n\n# Install required packages\nRUN apk update && apk add --no-cache \\\n    build-base \\\n    ca-certificates \\\n    wget \\\n    gnupg \\\n    libevent-dev \\\n    libtool \\\n    autoconf \\\n    automake \\\n    gettext \\\n    db-dev \\\n    mariadb-dev \\\n    postgresql-dev \\\n    sqlite-dev \\\n    libressl \\\n    curl-dev \\\n    cyrus-sasl-dev \\\n    linux-pam-dev \\\n    make\nRUN apk add fts-dev byacc\n\nRUN wget https://www.opensmtpd.org/archives/libasr-1.0.4.tar.gz && \\\n    tar -zxvf libasr-1.0.4.tar.gz && \\\n    rm -f libasr-1.0.4.tar.gz\n\nRUN cd libasr-1.0.4 && \\\n    ./bootstrap && \\\n    ./configure && \\\n    make && \\\n    make install\n# Download OpenSMTPD source code\nRUN wget https://github.com/OpenSMTPD/OpenSMTPD/releases/download/6.6.1p1/opensmtpd-6.6.1p1.tar.gz && \\\n    tar -zxvf opensmtpd-6.6.1p1.tar.gz && \\\n    rm -f opensmtpd-6.6.1p1.tar.gz\n\nWORKDIR /opensmtpd-6.6.1p1\n\nRUN ./bootstrap && \\\n    ./configure && \\\n    make && \\\n    make install\n\n# Clean up unnecessary packages and files\nRUN apk del build-base \\\n    libressl-dev \\\n    wget \\\n    gnupg \\\n    libtool \\\n    autoconf \\\n    automake \\\n    gettext \\\n    db-dev \\\n    mariadb-dev \\\n    postgresql-dev \\\n    sqlite-dev \\\n    libressl \\\n    curl-dev \\\n    cyrus-sasl-dev \\\n    linux-pam-dev && \\\n    rm -rf /var/cache/apk/* && \\\n    rm -rf /OpenSMTPD-opensmtpd-6.6.1p1\n\nCOPY smtpd.conf /usr/local/etc/smtpd.conf\n# Expose SMTP port\nEXPOSE 25\n\n# Create a system user for OpenSMTPD\nRUN adduser -D -h /var/mail _smtpq\nRUN adduser -D -h /var/mail _smtpd\n\n# Run OpenSMTPD\nCMD [\"smtpd\", \"-dv\"]"}
{"input": "Generate a dockerfile of MySQL Server 5.6.5 building from source", "output": "# Use a base image with necessary build tools\nFROM ubuntu:20.04\nENV DEBIAN_FRONTEND=noninteractive\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    cmake \\\n    git \\\n    libncurses5-dev \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libboost-all-dev \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN wget http://launchpadlibrarian.net/140087283/libbison-dev_2.7.1.dfsg-1_amd64.deb && wget http://launchpadlibrarian.net/140087282/bison_2.7.1.dfsg-1_amd64.deb\nRUN dpkg -i libbison-dev_2.7.1.dfsg-1_amd64.deb && dpkg -i bison_2.7.1.dfsg-1_amd64.deb && rm libbison-dev_2.7.1.dfsg-1_amd64.deb bison_2.7.1.dfsg-1_amd64.deb\n\nRUN groupadd mysql && useradd -r -g mysql -s /bin/false mysql\n# Clone MySQL source from GitHub\nRUN git clone --depth=1 --branch mysql-5.6.5 https://github.com/mysql/mysql-server.git /mysql\n\n# Build MySQL Server\nWORKDIR /mysql\nRUN mkdir bld && cd bld && cmake .. -DCMAKE_CXX_FLAGS=\"-std=c++03\" && make && make install\n\n# Cleanup\nRUN rm -rf /mysql\nRUN cd /usr/local/mysql && \\\n    mkdir mysql-files && \\\n    chown mysql:mysql mysql-files && chmod 750 mysql-files\nRUN bin/mysqld --initialize --user=mysql && bin/mysql_ssl_rsa_setup\n\n# Expose MySQL port\nEXPOSE 3306\n\n# Set default command to run MySQL Server\nCMD [\"mysqld\"]"}
{"input": "Generate a dockerfile of Sprockets 3.7.1", "output": "# Use Ruby 2.7 as the base image\nFROM ruby:2.7\n\n# Install necessary dependencies\nRUN apt-get update -qq && apt-get install -y \\\n    build-essential \\\n    nodejs \\\n && rm -rf /var/lib/apt/lists/*\n\n# Set the working directory in the container\nWORKDIR /app\n\n# RUN gem install bundler && bundle install\nCOPY app /app\n\n# Install Sprockets version 3.7.1\nRUN gem install 'sprockets:3.7.1' 'sinatra:2.1.0' 'sass:3.7.4' 'tilt:2.0.10'\n\n# Expose port 3000 to the Docker host, so we can access our Rails app\nEXPOSE 4567\n\n# Start the Rails server when the container starts\nCMD [\"ruby\", \"app.rb\"]"}
{"input": "Generate a dockerfile of Nginx 1.13.2", "output": "# Use the official Nginx image as the base image\nFROM nginx:1.13.2\n\n# Expose ports\nEXPOSE 80\nEXPOSE 443\n\n# Command to run Nginx when the container starts\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"}
{"input": "Generate a dockerfile of nginx 1.13.2 building from source", "output": "# Use a base image with necessary tools for building nginx\nFROM ubuntu:latest\n\n# Install necessary dependencies\nRUN apt-get update && \\\n    apt-get install -y \\\n    wget \\\n    build-essential \\\n    libpcre3 \\\n    libpcre3-dev \\\n    zlib1g-dev \\\n    openssl \\\n    libssl-dev \\\n    glibc-source\n\n# Download nginx source\nRUN wget http://nginx.org/download/nginx-1.13.2.tar.gz && \\\n    tar -xzvf nginx-1.13.2.tar.gz && \\\n    rm nginx-1.13.2.tar.gz\n\n# Change directory to nginx source\nWORKDIR /nginx-1.13.2\n\nRUN find src/ -type f -exec sed -i 's/current_salt/output/g' {} \\;\n# Configure nginx\nRUN ./configure --prefix=/usr/local/nginx --with-http_ssl_module\n# Build nginx\nRUN make CFLAGS=\"-Wno-unused-parameter -g\"\n\n# Install nginx\nRUN make install\n\n# Expose port 80\nEXPOSE 80\n\n# Start nginx when container starts\nCMD [\"/usr/local/nginx/sbin/nginx\", \"-g\", \"daemon off;\"]"}
{"input": "Generate a dockerfile of Node 8.5.0 using package and package-lock", "output": "# Use official Node.js 8.5.0 image as base\nFROM node:8.5.0\n\n# Set the working directory in the container\nWORKDIR /usr/src/app\n\n# Copy package.json and package-lock.json to the working directory\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install\n\n# Copy the rest of the application code\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 3000\n\n# Command to run the application\nCMD [\"npm\", \"start\"]"}
{"input": "Generate a dockerfile of Node 9.0.0 with a postegreSQL database", "output": "# Use official Node.js 9.0.0 image as base\nFROM node:9.0.0\n\nRUN echo \"deb http://archive.debian.org/debian/ stretch main contrib non-free\" > /etc/apt/sources.list && \\\n    echo \"deb http://archive.debian.org/debian/ stretch-proposed-updates main contrib non-free\" >> /etc/apt/sources.list && \\\n    echo \"deb http://archive.debian.org/debian-security stretch/updates main contrib non-free\" >> /etc/apt/sources.list\n# Set working directory within the container\nWORKDIR /app\n\n# Copy package.json and package-lock.json to the working directory\nCOPY package.json package-lock.json ./\n\n# Install dependencies\nRUN npm install\n\n# Install PostgreSQL\nRUN apt-get update && apt-get install -y postgresql postgresql-contrib\n\n# Copy the rest of the application code\nCOPY . .\n\n# Switch to the postgres user\nUSER postgres\n\n# Initialize the database\nRUN /etc/init.d/postgresql start &&\\\n    createdb -O postgres example &&\\\n    psql example < db.sql &&\\\n    psql -c \"ALTER USER postgres WITH PASSWORD 'postgres';\"\n    \n\n# Expose node port\nEXPOSE 3000\n\n# Start PostgreSQL service\nCMD service postgresql start && sleep 10 && npm start"}
{"input": "Generate a dockerfile of Node 9.0.0 with a postegreSQL database building from source", "output": "# Use Ubuntu 18.04 as the base image\nFROM ubuntu:18.04\n\n# Install necessary dependencies\nRUN apt-get update && apt-get install -y \\\n    wget \\\n    build-essential \\\n    ca-certificates \\\n    libreadline-dev \\\n    zlib1g-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libxml2-utils \\\n    libxml2-dev \\\n    libxslt-dev \\\n    libperl-dev \\\n    python3 \\\n    python3-pip \\\n    llvm \\\n    libxml2-dev \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libpam0g-dev \\\n    libedit-dev \\\n    libbsd-dev \\\n    build-essential \\\n    bison \\\n    flex \\\n    git \\\n    cmake \\\n    ninja-build \\\n    libtool \\\n    pkg-config \\\n    sudo \\\n    vim \\\n    curl \\\n    lsb-release \\\n    gnupg \\\n    postgresql-client\n\n# Install Node.js 9.0.0\nRUN curl -sL https://deb.nodesource.com/setup_9.x | bash -\nRUN apt-get install -y nodejs\n\n# Download PostgreSQL source\nRUN wget https://ftp.postgresql.org/pub/source/v13.2/postgresql-13.2.tar.gz\n\n# Unpack the source code\nRUN tar xfz postgresql-13.2.tar.gz\n\n# Change directory to the postgresql source\nWORKDIR /postgresql-13.2\n\n# Configure, make, and install PostgreSQL\nRUN ./configure && make && make install\n\n# Add PostgreSQL bin directory to PATH\nENV PATH=\"/usr/local/pgsql/bin:${PATH}\"\n\n# Expose PostgreSQL default port\nEXPOSE 5432\n\n# Set the default command to run when starting the container\nCMD [\"postgres\"]"}
{"input": "Generate a dockerfile of PostgreSQL before 11.2", "output": "# Use the official PostgreSQL 11.1 image\nFROM postgres:11.1\n\n# Optionally, set environment variables\nENV POSTGRES_USER postgres\nENV POSTGRES_PASSWORD password\nENV POSTGRES_DB mydatabase\n\n# Expose the PostgreSQL port\nEXPOSE 5432\n\n# Run PostgreSQL when the container starts\nCMD [\"postgres\"]"}
{"input": "Generate a dockerfile of PostgreSQL before 11.2 building from source", "output": "# Use a base image with necessary dependencies\nFROM ubuntu:20.04\n\n# Update package list and install necessary tools\nRUN apt-get update && \\\n    apt-get install -y wget build-essential git \n\n# Create a directory for PostgreSQL source code\nWORKDIR /opt\n\n# Clone PostgreSQL source code from the official repository\nRUN git clone --branch REL_11_1 --depth 1 https://github.com/postgres/postgres.git\n\nRUN apt-get install -y libreadline-dev zlib1g-dev bison flex\n\n# Change to PostgreSQL source code directory\nWORKDIR /opt/postgres\n\n# Configure, build and install PostgreSQL\nRUN ./configure && \\\n    make && \\\n    make install\n\n# Expose PostgreSQL port\nEXPOSE 5432\n\n# Initialize a directory for data storage\nRUN mkdir -p /var/lib/postgresql/data\n\n# Create a postgres user and group\nRUN groupadd -r postgres && useradd -r -g postgres postgres\n\n# Set permissions for data directory\nRUN chown -R postgres:postgres /var/lib/postgresql/data\n\n# Switch to postgres user\nUSER postgres\n\n# Initialize the database cluster\nRUN /usr/local/pgsql/bin/initdb -D /var/lib/postgresql/data\n\n# Set the password for the postgres user\nRUN /usr/local/pgsql/bin/pg_ctl -D /var/lib/postgresql/data start && \\\n    /usr/local/pgsql/bin/psql -c \"ALTER USER postgres PASSWORD 'postgres';\" && \\\n    /usr/local/pgsql/bin/pg_ctl -D /var/lib/postgresql/data stop\n\nCOPY postgresql.conf /usr/local/pgsql/postgresql.conf\nCOPY pg_hba.conf /var/lib/postgresql/data/pg_hba.conf\n\n# Start PostgreSQL server\nCMD [\"/usr/local/pgsql/bin/postgres\", \"-D\", \"/var/lib/postgresql/data\", \"-c\", \"config_file=/usr/local/pgsql/postgresql.conf\"]"}
{"input": "Generate a dockerfile of ProFTPd with mod_copy enabled", "output": "# Use a base image with ProFTPD dependencies\nFROM debian:bullseye\n\n# Install required packages\nRUN apt-get update && \\\n    apt-get install -y proftpd-basic proftpd-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD https://raw.githubusercontent.com/proftpd/proftpd/master/contrib/mod_copy.c /tmp/mod_copy.c\n# Compile mod_copy module\nRUN prxs -c -i -d /tmp/mod_copy.c\n# Copy ProFTPD configuration file with mod_copy module enabled\nCOPY proftpd.conf /etc/proftpd/\n\n# Expose ports (you may want to adjust these based on your ProFTPD configuration)\nEXPOSE 20 21\n\n# Start ProFTPD in foreground\nCMD [\"proftpd\", \"--nodaemon\"]"}
{"input": "Generate a dockerfile of ProFTPd 1.3.5 with mod_copy enabled building from source", "output": "# Use a base image with the necessary dependencies to build ProFTPd from source\nFROM debian:buster AS builder\n\n# Install build dependencies\nRUN apt-get update && \\\n    apt-get install -y \\\n    build-essential \\\n    wget \\\n    libncurses-dev \\\n    libssl-dev \\\n    libpam0g-dev \\\n    zlib1g-dev \\\n    libwrap0-dev \\\n    libcap-dev \\\n    libmariadb-dev \\\n    libldap2-dev \\\n    libpq-dev \\\n    libsqlite3-dev\n\n# Download and extract ProFTPd source\nWORKDIR /tmp\nRUN wget ftp://ftp.proftpd.org/distrib/source/proftpd-1.3.5.tar.gz && \\\n    tar -zxvf proftpd-1.3.5.tar.gz\n\nRUN groupadd proftpd && \\\n    useradd -ms /bin/bash -g proftpd proftpd \n# Build ProFTPd with mod_copy\nWORKDIR /tmp/proftpd-1.3.5\nRUN install_user=proftpd install_group=proftpd ./configure --with-modules=mod_copy && \\\n    make && \\\n    make install\n\n# Start a new image\nFROM debian:buster\n\nRUN groupadd proftpd && \\\n    useradd -ms /bin/bash -g proftpd proftpd \n# Install runtime dependencies\nRUN apt-get update && \\\n    apt-get install -y \\\n    libssl1.1 \\\n    libpam0g \\\n    libwrap0 \\\n    libcap2 \\\n    libldap-2.4-2 \\\n    libpq5 \\\n    libsqlite3-0\n\n# Copy ProFTPd binaries and configuration files from builder image\nCOPY --from=builder /usr/local/sbin/proftpd /usr/local/sbin/\nCOPY --from=builder /usr/local/etc/proftpd.conf /usr/local/etc/\n\nRUN echo \"\\n<IfModule mod_delay.c>\\n  DelayEngine off\\n</IfModule>\" >> /usr/local/etc/proftpd.conf\nRUN touch /usr/local/proftpd.scoreboard\nRUN chown -R proftpd:proftpd /usr/local/sbin/proftpd && \\\n    chown -R proftpd:proftpd /usr/local/etc/proftpd.conf && \\\n    chown -R proftpd:proftpd /usr/local/proftpd.scoreboard\n# Expose FTP ports\nEXPOSE 80 21\n\n# Run ProFTPd\nCMD [\"/usr/local/sbin/proftpd\", \"--nodaemon\"]"}
{"input": "Generate a dockerfile of Certbot 2.4.0", "output": "# Use Ubuntu 20.04 as the base image\nFROM ubuntu:20.04\n\n# Set non-interactive mode during apt-get installs\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update package lists\nRUN apt-get update && apt-get install -y \\\n    software-properties-common \\\n    && add-apt-repository universe \\\n    && apt-get update\n\n# Install Certbot dependencies\nRUN apt-get install -y \\\n    certbot \\\n    && apt-get clean\n\n# Install pip\nRUN apt-get install -y python3-pip\n\n# Install Certbot 2.4.1 using pip\nRUN pip3 install certbot==2.4.0\n\n# Expose the necessary ports\nEXPOSE 80\nEXPOSE 443\n\n# Default command when the container starts\nCMD [\"certbot\"]"}
{"input": "Generate a dockerfile of fontforge", "output": "FROM ubuntu:16.04\n\nRUN  apt-get update \\\n  && apt-get install -y \\\n     software-properties-common \\\n     --no-install-recommends \\\n  && add-apt-repository ppa:fontforge/fontforge \\\n  && apt-get update \\\n  && apt-get install -y \\\n     fontforge \\\n     --no-install-recommends \\\n  && rm -rf /var/lib/apt/lists/*\n\nENV HOME /home/fontforge\nRUN useradd --create-home --home-dir $HOME fontforge\nWORKDIR $HOME\nUSER fontforge\nCMD [ \"fontforge\" ]"}
{"input": "Generate a dockerfile of powershell 7.0.1", "output": "FROM debian:stretch-slim\n\nENV POWERSHELL_VERSION 7.0.1\n\nRUN apt-get update && apt-get install -y \\\n\tca-certificates \\\n\tdpkg \\\n\tlibcurl3 \\\n\tlibicu57 \\\n\tlibssl1.0.2 \\\n\tliblttng-ust0 \\\n\tlibunwind8 \\\n\twget \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN cd /usr/src \\\n\t&& wget \"https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell_${POWERSHELL_VERSION}-1.debian.9_amd64.deb\" -O /tmp/powershell.deb \\\n\t&& dpkg -i /tmp/powershell.deb \\\n\t&& ln -snf \"/opt/microsoft/powershell/7/pwsh\" /usr/bin/pwsh \\\n\t&& apt-get install -fy \\\n\t&& rm -rf /var/lib/apt/lists/* /usr/src/* /tmp/powershell.deb \\\n\t&& which pwsh\n\nENTRYPOINT [ \"/usr/bin/pwsh\" ]"}
{"input": "Generate a dockerfile of telnet", "output": "FROM alpine:latest\n\nRUN apk add --no-cache --virtual \\\n\tbusybox-extras\n\nENTRYPOINT [ \"telnet\" ]"}
{"input": "Generate a dockerfile of Aom", "output": "FROM debian:bullseye-slim\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get install -y \\\n\tapt-transport-https \\\n\tca-certificates \\\n\tgnupg \\\n\twget \\\n\t--no-install-recommends\n\n# Add the atom debian repo\nRUN wget -qO- https://packagecloud.io/AtomEditor/atom/gpgkey | apt-key add -\nRUN sh -c 'echo \"deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main\" > /etc/apt/sources.list.d/atom.list'\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n\tatom \\\n\tgit \\\n\tgconf2 \\\n\tgconf-service \\\n\tgvfs-bin \\\n\tlibasound2 \\\n\tlibcap2 \\\n\tlibgconf-2-4 \\\n\tlibgtk2.0-0 \\\n\tlibnotify4 \\\n\tlibnss3 \\\n\tlibxkbfile1 \\\n\tlibxss1 \\\n\tlibxtst6 \\\n\tlibx11-xcb-dev \\\n\txdg-utils \\\n\t--no-install-recommends\n\n# Autorun atom\nENTRYPOINT [ \"atom\", \"--foreground\" ]"}
{"input": "Generate a dockerfile of gcalcli", "output": "FROM alpine:latest\n\nENV HOME /home/gcalcli\n\nRUN apk --no-cache add \\\n\tpython3 \\\n\tpython3-dev \\\n\tbuild-base \\\n\t&& adduser -S gcalcli \\\n\t&& chown -R gcalcli $HOME \\\n\t&& pip3 install vobject parsedatetime gcalcli\n\nWORKDIR $HOME\nUSER gcalcli\n\nENTRYPOINT [ \"gcalcli\" ]"}
{"input": "Generate a dockerfile of XAMPP 8.2.4", "output": "# Use official Ubuntu 20.04 LTS as the base image\nFROM ubuntu:20.04\n\n# Set non-interactive mode\nENV DEBIAN_FRONTEND noninteractive\n\n# Install required packages\nRUN apt-get update && apt-get install -y \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Download XAMPP 8.2.4\nRUN wget -O /tmp/xampp-linux-x64-8.2.4-0-installer.run https://sourceforge.net/projects/xampp/files/XAMPP%20Linux/8.2.4/xampp-linux-x64-8.2.4-0-installer.run/download\n\n# Make the installer executable\nRUN chmod +x /tmp/xampp-linux-x64-8.2.4-0-installer.run\n\n# Run XAMPP installer in unattended mode\nRUN /tmp/xampp-linux-x64-8.2.4-0-installer.run --mode unattended\n\n# Clean up downloaded installer\nRUN rm /tmp/xampp-linux-x64-8.2.4-0-installer.run\n\n# Expose ports\nEXPOSE 80 443\n\n# Start XAMPP services\nCMD [\"/opt/lampp/lampp\", \"start\"]"}
{"input": "Generate a dockerfile of FileZilla Client", "output": "# Base Image\nFROM ubuntu:latest\n\n# Install FileZilla\nRUN apt-get update \\\n    && apt-get install -y filezilla \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set display environment variable (for GUI)\nENV DISPLAY=:0\n\n# Command to run FileZilla\nCMD [\"filezilla\"]"}
{"input": "Generate a dockerfile of exiftool", "output": "# Use the official Perl image as base\nFROM perl:latest\n\n# Install required packages\nRUN apt-get update && \\\n    apt-get install -y libimage-exiftool-perl\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Define the entry point\nENTRYPOINT [\"exiftool\"]"}
{"input": "Generate a dockerfile of curl 7.8.1", "output": "FROM debian:latest\n\nRUN apt update && apt install -y --fix-missing \\\n    git \\\n    build-essential \\\n    wget \\\n    python3 \\\n\tnetcat-openbsd \\\n    libssl-dev\n\nWORKDIR /build\n\nRUN wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.tar.gz\n\nRUN tar -xzvf curl-7.81.0.tar.gz\n\nWORKDIR /build/curl-7.81.0\n\nRUN ./configure --with-openssl\n\nRUN make -j$(nproc)\n\nRUN make install\n\nRUN cp -r /usr/local/lib /usr/lib\n\nRUN ldconfig\n\nWORKDIR /\n\nENTRYPOINT [ \"/bin/bash\"]"}
{"input": "Generate a dockerfile of pdfkit 0.8.6", "output": "FROM ubuntu\n\nRUN apt update\nRUN apt install -y python3 ruby\nRUN gem install pdfkit -v 0.8.6\n\nENTRYPOINT [\"/bin/bash\"]"}
{"input": "Generate a dockerfile of Spring Cloud Function 3.1.6", "output": "FROM ubuntu:18.04\n\nRUN apt update\nRUN apt install wget unzip -y\nRUN apt install openjdk-8-jdk maven -y\n\nRUN useradd -m rce\n\nWORKDIR /home/rce\n\nRUN wget https://github.com/spring-cloud/spring-cloud-function/archive/refs/tags/v3.1.6.zip && unzip v3.1.6.zip\n\nWORKDIR /home/rce/spring-cloud-function-3.1.6/spring-cloud-function-samples/function-sample-pojo\n\nRUN mvn package\n\nEXPOSE 8080\n\nENTRYPOINT java -jar ./target/function-sample-pojo-2.0.0.RELEASE.jar"}
{"input": "Generate a dockerfile of Sudo 1.8.13", "output": "FROM debian:jessie\n\n# install debian stuff\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    wget vim build-essential \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# configure vuln application\nRUN wget https://www.sudo.ws/dist/sudo-1.8.13.tar.gz -O /tmp/sudo.tar.gz && \\\n    tar xfz /tmp/sudo.tar.gz -C /tmp/ && \\\n    cd /tmp/sudo-1.8.13 && \\\n    ./configure && \\\n    make && make install\nRUN rm -rf /tmp/sudo*\n\n# create default user\nRUN useradd -d /home/user \\\n    -s /bin/bash \\\n    -ms /bin/bash user\n\n# add sudoers entry\nRUN echo 'user ALL=NOPASSWD: sudoedit /home/*/*/esc.txt' >> /etc/sudoers\n\nCMD [\"su\", \"-\", \"user\"]"}
{"input": "Generate a dockerfile of Blueimp jQuery-File-Upload 9.22.0", "output": "FROM ubuntu:latest\n\nENV DEBIAN_FRONTEND=noninteractive\n# Install apache, PHP\nRUN apt-get update && apt-get -y upgrade && \\ \n    apt-get -y install apache2 php libapache2-mod-php wget tar unzip\n\n# Enable apache mods.\nRUN a2enmod rewrite\nRUN a2enmod headers\n\n# Manually set up the apache environment variables\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\nENV APACHE_LOCK_DIR /var/lock/apache2\nENV APACHE_PID_FILE /var/run/apache2.pid\n\n# Expose apache.\nEXPOSE 80\n\n# Install releases\nRUN cd /var/www/html && wget https://github.com/blueimp/jQuery-File-Upload/archive/v9.22.0.tar.gz && tar -zxvf v9.22.0.tar.gz\n    \nRUN chown -R www-data:www-data /var/www/html\n\n# By default start up apache in the foreground, override with /bin/bash for interative.\nCMD /usr/sbin/apache2ctl -D FOREGROUND"}
{"input": "Generate a dockerfile of squid 3.5.27", "output": "FROM centos:7\n\nRUN yum install -y \\\n perl \\\n gcc \\\n autoconf \\\n automake \\\n make \\\n sudo \\\n wget \\\n libxml2-devel \\\n libcap-devel \\\n libtool-ltdl-devel \\\n openssl-devel \\\n gcc-c++\nRUN curl -s http://www.squid-cache.org/Versions/v3/3.5/squid-3.5.27.tar.gz > squid.tar.gz\nRUN tar -xvzf squid.tar.gz\nWORKDIR /squid-3.5.27\n\nRUN ./configure \\\n --prefix=/usr \\\n --includedir=/usr/include \\\n --datadir=/usr/share \\\n --bindir=/usr/bin \\\n --libexecdir=/usr/lib/squid \\\n --localstatedir=/usr/lib/squid \\\n --localstatedir=/var \\\n --sysconfdir=/etc/squid \\\n --with-openssl \\\n --enable-ssl \\\n --enable-ssl-crtd \\\n --disable-icap-client \\\n --disable-wccp \\\n --disable-wccpv2 \\\n --disable-snmp \\\n --disable-eui \\\n --disable-htcp \\\n --disable-ident-lookups \\\n --disable-ipv6 \\\n --without-mit-krb5 \\\n --without-heimdal-krb5 \\\n --without-libcap\nRUN make\nRUN make install\n\nRUN touch /var/logs/access.log\nRUN touch /var/logs/cache.log\n# Squid runs as 'nobody', per http://www.squid-cache.org/Doc/config/cache_effective_user/\nRUN chown nobody:nobody /var/logs/access.log\nRUN chown nobody:nobody /var/logs/cache.log\n\nRUN /usr/lib/squid/ssl_crtd -c -s /var/lib/ssl_db\nEXPOSE 3128\nENTRYPOINT [ \"/usr/sbin/squid\", \"-f\", \"/etc/squid/squid.conf\", \"-NYCd\", \"1\" ]"}
{"input": "Generate a dockerfile of Elasticsearch 1.3.4", "output": "FROM openjdk:8\n\n# Download and Extract elasticsearch\nRUN wget -c -O elasticsearch-1.3.4.tar.gz https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.3.4.tar.gz\nRUN tar xvf elasticsearch-1.3.4.tar.gz && rm -rf elasticsearch-1.3.4.tar.gz\n\nCMD [\"/elasticsearch-1.3.4/bin/elasticsearch\"]"}
{"input": "Generate a dockerfile of Wordpress with Ultimate Member Plugin 2.8.2", "output": "FROM wordpress:latest\n\n# Installs the necessary tools\nRUN apt-get update && apt-get install -y wget unzip\n\n# Download and install the Ultimate Member plugin\nRUN wget -O /tmp/ultimate-member.zip https://downloads.wordpress.org/plugin/ultimate-member.2.8.2.zip \\\n    && unzip /tmp/ultimate-member.zip -d /usr/src/wordpress/wp-content/plugins/ \\\n    && rm /tmp/ultimate-member.zip"}
{"input": "Generate a dockerfile of ffmpeg 3.2.4", "output": "FROM debian:9\n\nRUN apt-get update && apt-get install -y \\\n        autoconf \\\n        automake \\\n        build-essential \\\n        cmake \\\n        git-core \\\n        libass-dev \\\n        libfreetype6-dev \\\n        libsdl2-dev \\\n        libtool \\\n        libva-dev \\\n        libvdpau-dev \\\n        libvorbis-dev \\\n        libxcb1-dev \\\n        libxcb-shm0-dev \\\n        libxcb-xfixes0-dev \\\n        pkg-config \\\n        texinfo \\\n        wget \\\n        zlib1g-dev \\\n    && wget -qO- https://www.ffmpeg.org/releases/ffmpeg-3.2.4.tar.gz | tar --strip-components 1 -xz -C /usr/src \\\n    && cd /usr/src \\\n    && ./configure --pkg-config-flags=\"--static\" --disable-yasm \\\n    && make && make install \\\n    && rm -rf /usr/src/*\n\nCMD [\"ffmpeg\"]"}
{"input": "Generate a dockerfile elfinder 2.1.58", "output": "FROM php:7.4-apache\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends unzip zip\n\nRUN cd /var/www/html/ \\\n    && curl -sSL https://github.com/Studio-42/elFinder/archive/2.1.58.tar.gz | tar --strip-components 1 -xz\n\nRUN cd /var/www/html/ \\\n    && mv ./php/connector.minimal.php-dist ./php/connector.minimal.php \\\n    && cp elfinder.html index.html \\\n    && chown www-data:www-data -R ./"}
{"input": "Generate a dockerfile of magento 2.2.7", "output": "FROM php:7.1-apache\n\nRUN apt-get update && apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n        libmcrypt-dev \\\n        libicu-dev \\\n        libxml2-dev \\\n        libxslt1-dev \\\n    && docker-php-ext-install -j$(nproc) iconv mcrypt bcmath intl zip pdo_mysql soap xsl \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd \\\n    && rm -rf /usr/src/* /var/lib/apt/lists/*\n\nRUN cd /var/www/html \\\n    && curl -sSL https://github.com/magento/magento2/archive/2.2.7.tar.gz | tar xvz --strip-components=1 \\\n    && curl -sSL https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename composer \\\n    && composer install \\\n    && chown www-data:www-data -R . \\\n    && a2enmod rewrite"}
{"input": "Generate a dockerfile of phpmyadmin 4.8.1", "output": "FROM php:7.2-apache\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends unzip \\\n    && rm -r /var/lib/apt/lists/*\n\nARG SOURCE_URL=https://files.phpmyadmin.net/phpMyAdmin/4.8.1/phpMyAdmin-4.8.1-all-languages.zip\n\nRUN cd /tmp \\\n    && curl -#SL ${SOURCE_URL} -o /tmp/phpmyadmin.zip \\\n    && unzip -q /tmp/phpmyadmin.zip \\\n    && cp -r phpMyAdmin-*/* /var/www/html/ \\\n    && docker-php-ext-install mbstring mysqli \\\n    && rm -rf /tmp/*"}
{"input": "Generate a dockerfile of Postgres 10.7", "output": "FROM postgres:10.7"}
{"input": "Generate a dockerfile of tomcat 8.5", "output": "FROM tomcat:8.5"}
{"input": "Generate a dockerfile of tikiwiki 21.1", "output": "FROM php:7.2-apache\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev libicu-dev wait-for-it \\\n    && curl --retry 3 -#SL https://sourceforge.net/projects/tikiwiki/files/Tiki_21.x_UY_Scuti/21.1/tiki-21.1.tar.xz/download | tar xJ -C /var/www/html --strip-components=1 \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN docker-php-ext-configure gd --with-freetype-dir=/usr --with-jpeg-dir=/usr --with-png-dir=/usr \\\n    && docker-php-ext-install -j$(nproc) gd intl calendar zip mysqli pdo_mysql \\\n    && cd /var/www/html \\\n    && chown www-data:www-data -R ."}
{"input": "Generate a dockerfile of php 5.6.12 apache", "output": "FROM php:5.6.12-apache\n\nRUN printf \"deb http://archive.debian.org/debian/ jessie main\\ndeb-src http://archive.debian.org/debian/ jessie main\\ndeb http://security.debian.org jessie/updates main\\ndeb-src http://security.debian.org jessie/updates main\" > /etc/apt/sources.list"}
{"input": "Generate a dockerfile of php 5 fpm", "output": "FROM php:5-fpm"}
{"input": "Generate a dockerfile of laravel 8.4.2", "output": "FROM php:7.4-apache\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends unzip \\\n    && curl -#L -o /usr/local/bin/composer https://github.com/composer/composer/releases/download/1.10.19/composer.phar \\\n    && chmod +x /usr/local/bin/composer\n\nRUN cd /var/www \\\n    && rm -rf html \\\n    && composer create-project laravel/laravel . \"v8.4.2\" \\\n    && sed -i -E 's|\"facade/ignition\": \".+?\"|\"facade/ignition\": \"2.5.1\"|g' composer.json \\\n    && composer update \\\n    && mv public html\n\nRUN chown www-data:www-data -R /var/www \\\n    && a2enmod rewrite"}
{"input": "Generate a dockerfile of activemq 5.17.3", "output": "FROM openjdk:11.0.16-jre\n\nENV ACTIVEMQ_VERSION 5.17.3\nENV ACTIVEMQ apache-activemq-$ACTIVEMQ_VERSION\nENV ACTIVEMQ_TCP=61616 ACTIVEMQ_AMQP=5672 ACTIVEMQ_STOMP=61613 ACTIVEMQ_MQTT=1883 ACTIVEMQ_WS=61614 ACTIVEMQ_UI=8161\n\nENV ACTIVEMQ_HOME /opt/activemq\n\nRUN mkdir -p $ACTIVEMQ_HOME \\\n    && curl -s -S https://archive.apache.org/dist/activemq/$ACTIVEMQ_VERSION/$ACTIVEMQ-bin.tar.gz | \\\n        tar xvz --strip-components=1 -C \"$ACTIVEMQ_HOME\"\n\nRUN sed -i 's/127\\.0\\.0\\.1/0.0.0.0/' \"${ACTIVEMQ_HOME}/conf/jetty.xml\" \\\n    && echo 'ACTIVEMQ_DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005\"' >> \"$ACTIVEMQ_HOME/bin/env\"\n\nWORKDIR $ACTIVEMQ_HOME\nEXPOSE $ACTIVEMQ_TCP $ACTIVEMQ_AMQP $ACTIVEMQ_STOMP $ACTIVEMQ_MQTT $ACTIVEMQ_WS $ACTIVEMQ_UI\n\nCMD [\"/opt/activemq/bin/activemq\", \"console\"]"}
{"input": "Generate a dockerfile of adminer 4.7.8", "output": "FROM php:7.4.33-apache\n\nADD https://github.com/vrana/adminer/releases/download/v4.7.8/adminer-4.7.8.php /var/www/html/index.php\nRUN chown www-data:www-data -R /var/www/html \\\n    && docker-php-ext-install -j$(nproc) pdo_mysql mysqli"}
{"input": "Generate a dockerfile of apache-druid 0.20.0", "output": "FROM openjdk:8-jre\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends python3 libfindbin-libs-perl\n\nRUN mkdir -p /opt/druid \\\n    && wget -qO- https://archive.apache.org/dist/druid/0.20.0/apache-druid-0.20.0-bin.tar.gz | tar xz --strip-components 1 -C /opt/druid\n\nEXPOSE 8888\nWORKDIR /opt/druid\nCMD [\"/opt/druid/bin/start-nano-quickstart\"]"}
{"input": "Generate a dockerfile of apisix-dashboard 2.9.0", "output": "FROM apache/apisix-dashboard:2.9.0"}
{"input": "Generate a dockerfile of cmsms 2.2.9.1", "output": "FROM php:7.2-apache\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends unzip libfreetype6-dev libjpeg62-turbo-dev libpng-dev libzip-dev \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd mysqli zip \\\n    && echo \"output_buffering=4096\\ndisplay_errors=Off\\nerror_reporting=0\" >> /usr/local/etc/php/conf.d/cmsms.ini \\\n    && curl -L -o /tmp/cmsms-2.2.9.1-install.zip http://s3.amazonaws.com/cmsms/downloads/14316/cmsms-2.2.9.1-install.zip \\\n    && unzip -d /var/www/html /tmp/cmsms-2.2.9.1-install.zip \\\n    && mv /var/www/html/cmsms-2.2.9.1-install.php /var/www/html/install.php \\\n    && chown www-data:www-data -R /var/www/html \\\n    && a2enmod rewrite \\\n    && rm -rf /tmp/cmsms-2.2.9.1-install.zip\n\nEXPOSE 80"}
{"input": "Generate a dockerfile of ecshop 4.0.6", "output": "FROM php:5.6-apache\n\nARG DOWNLOAD_PATH=/usr/local/src\n\nRUN docker-php-ext-install mysqli \\\n    && curl -#SL https://file.vulhub.org/download/ecshop/ecshop-4.0.6.tar.gz \\\n        | tar zx -C ${DOWNLOAD_PATH} \\\n    && cp -r ${DOWNLOAD_PATH}/ecshop/* /var/www/html/ \\\n    && cp -r ${DOWNLOAD_PATH}/appserver /var/www/ \\\n    && chown www-data:www-data -R /var/www \\\n    && echo \"date.timezone = Asia/Shanghai\" > /usr/local/etc/php/conf.d/date.ini \\\n    && rm -rf ${DOWNLOAD_PATH}/*"}
{"input": "Generate a dockerfile of geoserver 2.22.1", "output": "FROM openjdk:17.0.2-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends curl unzip ca-certificates \\\n    && curl -#SL https://sourceforge.net/projects/geoserver/files/GeoServer/2.22.1/geoserver-2.22.1-bin.zip/download -o /tmp/geoserver.zip \\\n    && mkdir /mnt/geoserver \\\n    && unzip /tmp/geoserver.zip -d /mnt/geoserver\n\nEXPOSE 8080\nWORKDIR /mnt/geoserver\n\nCMD [\"/mnt/geoserver/bin/startup.sh\"]"}
{"input": "Generate a dockerfile of jetty 9.4.40", "output": "FROM openjdk:8-jdk\n\nARG JETTY_BASE=/opt/jetty\nRUN wget -O/tmp/jetty.zip https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/9.4.40.v20210413/jetty-distribution-9.4.40.v20210413.zip \\\n    && unzip -d /opt /tmp/jetty.zip \\\n    && mv /opt/jetty-* ${JETTY_BASE} \\\n    && rm -rf /tmp/jetty*\n\nWORKDIR ${JETTY_BASE}\nCMD [\"/opt/jetty/bin/jetty.sh\", \"run\"]"}
{"input": "Generate a dockerfile of Jira 8.1.0", "output": "FROM dchevell/jira-software:8.1.0-ubuntu"}
{"input": "Generate a dockerfile of phpunit 5.6.2", "output": "FROM php:7.2-apache\n\nRUN apt-get update; \\\n    apt-get install -y --no-install-recommends unzip; \\\n    curl -#sL https://getcomposer.org/download/1.10.15/composer.phar -o /usr/local/bin/composer; \\\n    chmod +x /usr/local/bin/composer; \\\n    cd /var/www/html; \\\n    composer require phpunit/phpunit:5.6.2; \\\n    apt-get purge --auto-remove -y unzip; \\\n    rm -rf /var/lib/apt/lists/*"}